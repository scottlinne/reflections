What happens when you initialize a repository? Why do you need to do it?
When you initialize with git init it sets up this repository to be tracked by git. You initialize an empty repository so that files can 
begin getting tracked. You need to initialize a git repository so that git can be set up to track changes to files.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?
The staging area is an in-between holding place for files to be commited for tracking. this separates files
from the working directory, and ensures individual files or sets of files are tracked.

How can you use the staging area to make sure you have one commit per logical change?
you can use git diff to see what is in the staging area and working directory. you can then see what the changes
are in the different files, and confirm the differences or changes among the files. if there are a variety
of changes, you can determine what to commit and what not to commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you want to try changes to files withou affecting the main code base. You can create branches and checkout
these branches to work on tests or create variations to see how they would work.

How do the diagrams help you visualize the branch structure?
It helps you see the parent relationships and understnad which branches are accessible and which are not

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging the two branches brings the commit history from two separate brances together so you can go back to previous states
you can also delete one of the branches after merging

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The pros are this ensures you have to review the conflicts and discuss with other team members so that 
changes that should be included do not get removed.